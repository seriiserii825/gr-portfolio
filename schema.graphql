# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

interface Node {
    id: ID!
}

interface NodeConnection {
    edges: [NodeConnectionEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

interface NodeConnectionEdge {
    next: Node
    node: Node
    previous: Node
}

type Metadata {
    pathPrefix: String
    siteDescription: String
    siteName: String
    siteUrl: String
}

type NodeBelongsTo implements NodeConnection {
    edges: [NodeBelongsToEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type NodeBelongsToEdge implements NodeConnectionEdge {
    next: Node
    node: Node
    previous: Node
}

type Page {
    context: JSON!
    path: String!
}

type PageInfo {
    currentPage: Int!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    isFirst: Boolean!
    isLast: Boolean!
    perPage: Int!
    totalItems: Int!
    totalPages: Int!
}

type Query {
    allPage(
        "Filter pages."
        filter: PageFilterInput
    ): [Page]
    allStrapiJob(
        "Filter for StrapiJob nodes."
        filter: StrapiJobFilterInput,
        limit: Int,
        order: SortOrder = DESC,
        page: Int,
        "Defaults to 25 when page is provided."
        perPage: Int,
        skip: Int = 0,
        sort: [SortArgument],
        sortBy: String = "created_at"
    ): StrapiJobConnection
    allStrapiProject(
        "Filter for StrapiProject nodes."
        filter: StrapiProjectFilterInput,
        limit: Int,
        order: SortOrder = DESC,
        page: Int,
        "Defaults to 25 when page is provided."
        perPage: Int,
        skip: Int = 0,
        sort: [SortArgument],
        sortBy: String = "created_at"
    ): StrapiProjectConnection
    metaData: Metadata @deprecated(reason : "Use Query.metadata instead.")
    metadata: Metadata
    page(path: String!): Page
    strapiJob(
        id: ID,
        "Will return an error if not nullable."
        nullable: Boolean = false,
        path: String
    ): StrapiJob
    strapiProject(
        id: ID,
        "Will return an error if not nullable."
        nullable: Boolean = false,
        path: String
    ): StrapiProject
}

type StrapiJob implements Node {
    _id: String
    belongsTo(
        filter: BelongsToFilterInput,
        limit: Int,
        order: SortOrder = DESC,
        page: Int,
        "Defaults to 25 when page is provided."
        perPage: Int,
        skip: Int = 0,
        sort: [SortArgument!],
        sortBy: String = "date"
    ): NodeBelongsTo
    company: String
    createdAt(
        "Date format"
        format: String,
        "Locale"
        locale: String
    ): Date
    date: String
    description: [StrapiJob_Description]
    id: ID!
    number: Int
    position: String
    published_at(
        "Date format"
        format: String,
        "Locale"
        locale: String
    ): Date
    updatedAt(
        "Date format"
        format: String,
        "Locale"
        locale: String
    ): Date
}

type StrapiJobConnection implements NodeConnection {
    edges: [StrapiJobEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type StrapiJobEdge implements NodeConnectionEdge {
    next: StrapiJob
    node: StrapiJob
    previous: StrapiJob
}

type StrapiJob_Description {
    _id: String
    id: String
    name: String
}

type StrapiProject implements Node {
    Skill: String
    _id: String
    belongsTo(
        filter: BelongsToFilterInput,
        limit: Int,
        order: SortOrder = DESC,
        page: Int,
        "Defaults to 25 when page is provided."
        perPage: Int,
        skip: Int = 0,
        sort: [SortArgument!],
        sortBy: String = "date"
    ): NodeBelongsTo
    createdAt(
        "Date format"
        format: String,
        "Locale"
        locale: String
    ): Date
    description: String
    featured: Boolean
    github: String
    id: ID!
    image: StrapiProject_Image
    published_at(
        "Date format"
        format: String,
        "Locale"
        locale: String
    ): Date
    skills: [StrapiProject_Skills]
    stack: [StrapiProject_Stack]
    title: String
    updatedAt(
        "Date format"
        format: String,
        "Locale"
        locale: String
    ): Date
    url: String
}

type StrapiProjectConnection implements NodeConnection {
    edges: [StrapiProjectEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type StrapiProjectEdge implements NodeConnectionEdge {
    next: StrapiProject
    node: StrapiProject
    previous: StrapiProject
}

type StrapiProject_Image {
    _id: String
    alternativeText: String
    caption: String
    createdAt(
        "Date format"
        format: String,
        "Locale"
        locale: String
    ): Date
    ext: String
    formats: StrapiProject_Image_Formats
    hash: String
    height: Int
    id: String
    mime: String
    name: String
    provider: String
    related: [String]
    size: Float
    updatedAt(
        "Date format"
        format: String,
        "Locale"
        locale: String
    ): Date
    url(
        "Background color for 'contain'"
        background: String,
        "Blur level for base64 string"
        blur: Int,
        "Fit"
        fit: ImageFit = cover,
        "Height"
        height: Int,
        "Quality (default: 75)"
        quality: Int,
        "Width"
        width: Int
    ): Image
    width: Int
}

type StrapiProject_Image_Formats {
    medium: StrapiProject_Image_Formats_Medium
    small: StrapiProject_Image_Formats_Small
    thumbnail: StrapiProject_Image_Formats_Thumbnail
}

type StrapiProject_Image_Formats_Medium {
    ext: String
    hash: String
    height: Int
    mime: String
    name: String
    size: Float
    url(
        "Background color for 'contain'"
        background: String,
        "Blur level for base64 string"
        blur: Int,
        "Fit"
        fit: ImageFit = cover,
        "Height"
        height: Int,
        "Quality (default: 75)"
        quality: Int,
        "Width"
        width: Int
    ): Image
    width: Int
}

type StrapiProject_Image_Formats_Small {
    ext: String
    hash: String
    height: Int
    mime: String
    name: String
    size: Float
    url(
        "Background color for 'contain'"
        background: String,
        "Blur level for base64 string"
        blur: Int,
        "Fit"
        fit: ImageFit = cover,
        "Height"
        height: Int,
        "Quality (default: 75)"
        quality: Int,
        "Width"
        width: Int
    ): Image
    width: Int
}

type StrapiProject_Image_Formats_Thumbnail {
    ext: String
    hash: String
    height: Int
    mime: String
    name: String
    size: Float
    url(
        "Background color for 'contain'"
        background: String,
        "Blur level for base64 string"
        blur: Int,
        "Fit"
        fit: ImageFit = cover,
        "Height"
        height: Int,
        "Quality (default: 75)"
        quality: Int,
        "Width"
        width: Int
    ): Image
    width: Int
}

type StrapiProject_Skills {
    _id: String
    createdAt(
        "Date format"
        format: String,
        "Locale"
        locale: String
    ): Date
    id: String
    project: String
    published_at(
        "Date format"
        format: String,
        "Locale"
        locale: String
    ): Date
    title: String
    updatedAt(
        "Date format"
        format: String,
        "Locale"
        locale: String
    ): Date
}

type StrapiProject_Stack {
    _id: String
    kind: String
    ref: String
}

enum ImageFit {
    "Embed within both provided dimensions."
    contain
    "Crop to cover both provided dimensions."
    cover
    "Ignore the aspect ratio of the input and stretch to both provided dimensions."
    fill
    "Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified."
    inside
    "Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified. Some of these values are based on the object-fit CSS property."
    outside
}

enum SortOrder {
    "Sort ascending"
    ASC
    "Sort descending"
    DESC
}

enum TypeName {
    StrapiJob
    StrapiProject
}

input BelongsToFilterInput {
    id: IDQueryOperatorInput
    path: StringQueryOperatorInput
    typeName: TypeNameQueryOperatorInput
}

input BooleanQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: Boolean
    "Filter nodes that contain the field, including nodes where the field value is null."
    exists: Boolean
    "Filter by property matching any of the provided values."
    in: [Boolean]
    "Filter by property not equal to provided value."
    ne: Boolean
    "Filter by property not matching any of the provided values."
    nin: [Boolean]
}

input DateQueryOperatorInput {
    "Filter by property between provided values."
    between: [Date]
    "Filter by date property equal to provided date value."
    dteq: Date
    "Filter by property of (strict) equality."
    eq: Date
    "Filter nodes that contain the field, including nodes where the field value is null."
    exists: Boolean
    "Filter by property greater than provided value."
    gt: Date
    "Filter by property greater or equal to provided value."
    gte: Date
    "Filter by property matching any of the provided values."
    in: [Date]
    "Filter by property less than provided value."
    lt: Date
    "Filter by property less than or equal to provided value."
    lte: Date
    "Filter by property not equal to provided value."
    ne: Date
    "Filter by property not matching any of the provided values."
    nin: [Date]
}

input FloatQueryOperatorInput {
    "Filter by property between provided values."
    between: [Float]
    "Filter by property of (strict) equality."
    eq: Float
    "Filter nodes that contain the field, including nodes where the field value is null."
    exists: Boolean
    "Filter by property greater than provided value."
    gt: Float
    "Filter by property greater or equal to provided value."
    gte: Float
    "Filter by property matching any of the provided values."
    in: [Float]
    "Filter by property less than provided value."
    lt: Float
    "Filter by property less than or equal to provided value."
    lte: Float
    "Filter by property not equal to provided value."
    ne: Float
    "Filter by property not matching any of the provided values."
    nin: [Float]
}

input IDQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: ID
    "Filter nodes that contain the field, including nodes where the field value is null."
    exists: Boolean
    "Filter by property matching any of the provided values."
    in: [ID]
    "Filter by property not equal to provided value."
    ne: ID
    "Filter by property not matching any of the provided values."
    nin: [ID]
}

input ImageQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: Image
    "Filter nodes that contain the field, including nodes where the field value is null."
    exists: Boolean
    "Filter by property matching any of the provided values."
    in: [Image]
    "Filter by property not equal to provided value."
    ne: Image
    "Filter by property not matching any of the provided values."
    nin: [Image]
    "Filter by property matching provided regular expression."
    regex: String
}

input IntQueryOperatorInput {
    "Filter by property between provided values."
    between: [Int]
    "Filter by property of (strict) equality."
    eq: Int
    "Filter nodes that contain the field, including nodes where the field value is null."
    exists: Boolean
    "Filter by property greater than provided value."
    gt: Int
    "Filter by property greater or equal to provided value."
    gte: Int
    "Filter by property matching any of the provided values."
    in: [Int]
    "Filter by property less than provided value."
    lt: Int
    "Filter by property less than or equal to provided value."
    lte: Int
    "Filter by property not equal to provided value."
    ne: Int
    "Filter by property not matching any of the provided values."
    nin: [Int]
}

input JSONQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: JSON
    "Filter nodes that contain the field, including nodes where the field value is null."
    exists: Boolean
    "Filter by property matching any of the provided values."
    in: [JSON]
    "Filter by property not equal to provided value."
    ne: JSON
    "Filter by property not matching any of the provided values."
    nin: [JSON]
    "Filter by property matching provided regular expression."
    regex: String
}

input PageFilterInput {
    context: JSONQueryOperatorInput
    path: StringQueryOperatorInput
}

input SortArgument {
    by: String! = "date"
    order: SortOrder = DESC
}

input StrapiJobFilterInput {
    _id: StringQueryOperatorInput
    company: StringQueryOperatorInput
    createdAt: DateQueryOperatorInput
    date: StringQueryOperatorInput
    description: StrapiJob_DescriptionFilterInput
    id: IDQueryOperatorInput
    number: IntQueryOperatorInput
    position: StringQueryOperatorInput
    published_at: DateQueryOperatorInput
    updatedAt: DateQueryOperatorInput
}

input StrapiJob_DescriptionFilterInput {
    _id: StringQueryOperatorInput
    id: StringQueryOperatorInput
    name: StringQueryOperatorInput
}

input StrapiProjectFilterInput {
    Skill: StringQueryOperatorInput
    _id: StringQueryOperatorInput
    createdAt: DateQueryOperatorInput
    description: StringQueryOperatorInput
    featured: BooleanQueryOperatorInput
    github: StringQueryOperatorInput
    id: IDQueryOperatorInput
    image: StrapiProject_ImageFilterInput
    published_at: DateQueryOperatorInput
    skills: StrapiProject_SkillsFilterInput
    stack: StrapiProject_StackFilterInput
    title: StringQueryOperatorInput
    updatedAt: DateQueryOperatorInput
    url: StringQueryOperatorInput
}

input StrapiProject_ImageFilterInput {
    _id: StringQueryOperatorInput
    alternativeText: StringQueryOperatorInput
    caption: StringQueryOperatorInput
    createdAt: DateQueryOperatorInput
    ext: StringQueryOperatorInput
    formats: StrapiProject_Image_FormatsFilterInput
    hash: StringQueryOperatorInput
    height: IntQueryOperatorInput
    id: StringQueryOperatorInput
    mime: StringQueryOperatorInput
    name: StringQueryOperatorInput
    provider: StringQueryOperatorInput
    related: StringListQueryOperatorInput
    size: FloatQueryOperatorInput
    updatedAt: DateQueryOperatorInput
    url: ImageQueryOperatorInput
    width: IntQueryOperatorInput
}

input StrapiProject_Image_FormatsFilterInput {
    medium: StrapiProject_Image_Formats_MediumFilterInput
    small: StrapiProject_Image_Formats_SmallFilterInput
    thumbnail: StrapiProject_Image_Formats_ThumbnailFilterInput
}

input StrapiProject_Image_Formats_MediumFilterInput {
    ext: StringQueryOperatorInput
    hash: StringQueryOperatorInput
    height: IntQueryOperatorInput
    mime: StringQueryOperatorInput
    name: StringQueryOperatorInput
    size: FloatQueryOperatorInput
    url: ImageQueryOperatorInput
    width: IntQueryOperatorInput
}

input StrapiProject_Image_Formats_SmallFilterInput {
    ext: StringQueryOperatorInput
    hash: StringQueryOperatorInput
    height: IntQueryOperatorInput
    mime: StringQueryOperatorInput
    name: StringQueryOperatorInput
    size: FloatQueryOperatorInput
    url: ImageQueryOperatorInput
    width: IntQueryOperatorInput
}

input StrapiProject_Image_Formats_ThumbnailFilterInput {
    ext: StringQueryOperatorInput
    hash: StringQueryOperatorInput
    height: IntQueryOperatorInput
    mime: StringQueryOperatorInput
    name: StringQueryOperatorInput
    size: FloatQueryOperatorInput
    url: ImageQueryOperatorInput
    width: IntQueryOperatorInput
}

input StrapiProject_SkillsFilterInput {
    _id: StringQueryOperatorInput
    createdAt: DateQueryOperatorInput
    id: StringQueryOperatorInput
    project: StringQueryOperatorInput
    published_at: DateQueryOperatorInput
    title: StringQueryOperatorInput
    updatedAt: DateQueryOperatorInput
}

input StrapiProject_StackFilterInput {
    _id: StringQueryOperatorInput
    kind: StringQueryOperatorInput
    ref: StringQueryOperatorInput
}

input StringListQueryOperatorInput {
    "Filter by property containing the provided value."
    contains: [String]
    "Filter by property containing any of the provided values."
    containsAny: [String]
    "Filter by property containing none of the provided values."
    containsNone: [String]
    "Filter which have an array property of specified size."
    size: Int
}

input StringQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: String
    "Filter nodes that contain the field, including nodes where the field value is null."
    exists: Boolean
    "Filter by property matching any of the provided values."
    in: [String]
    "Filter by property not equal to provided value."
    ne: String
    "Filter by property not matching any of the provided values."
    nin: [String]
    "Filter by property matching provided regular expression."
    regex: String
}

input TypeNameQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: TypeName
    "Filter nodes that contain the field, including nodes where the field value is null."
    exists: Boolean
    "Filter by property matching any of the provided values."
    in: [TypeName]
    "Filter by property not equal to provided value."
    ne: TypeName
    "Filter by property not matching any of the provided values."
    nin: [TypeName]
}


scalar Date

scalar Image

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

scalar File
